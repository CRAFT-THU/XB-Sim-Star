#ifndef _LINEAR_BUFFER_${layer_num}
#define _LINEAR_BUFFER_${layer_num}

#include "systemc.h"
#include "../config.h"

using namespace std;

SC_MODULE(linear_buffer_${layer_num}) {
	// linear buffer ${layer_num}
	sc_in<float> *input; //[${input_size}]; // in linear buffer ${layer_num}, upper layer is conv layer and its channels is 128
	sc_out<float> *output; //[${output_size}];
	sc_in<int> signal_in;
	sc_in<bool> clock_1;
	sc_out<int> signal_out;

	float *buffer;
	int current;

	void init() {
		current = 0;
		buffer = new float[${output_size}]();
		input = new sc_in<float>[${input_size}]();
		output = new sc_out<float>[${output_size}]();
	}

	void send_to_next_layer() {
		if (current == ${output_size}) {
			for (int i = 0; i < ${output_size}; i++)
				output[i].write(buffer[i]);
			signal_out.write(signal_in.read());
			current = 0;
		}
	}

	void add_to_buffer() {
		for (int i = 0; i < ${input_size}; i++)
			buffer[current / ${input_size} + i * ${output_size} / ${input_size}] = input[i].read();
		current += ${input_size};
	}

	SC_CTOR(linear_buffer_${layer_num}) {
		init();

		SC_METHOD(add_to_buffer);
		sensitive << signal_in;
		dont_initialize();

		SC_METHOD(send_to_next_layer);
		sensitive << clock_1.neg();
		dont_initialize();
	}

	~linear_buffer_${layer_num}() {
		delete []buffer;
		delete []input;
		delete []output;
	}
};


#endif // !_LINEAR_BUFFER_${layer_num}
